
1030-last-tast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000002c8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f13  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090a  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005af  00000000  00000000  00001c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004de  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008e6  00000000  00000000  0000288e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	c9 c0       	rjmp	.+402    	; 0x198 <__vector_1>
   6:	00 00       	nop
   8:	0c c1       	rjmp	.+536    	; 0x222 <__vector_2>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ec       	ldi	r30, 0xC8	; 200
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	f5 d0       	rcall	.+490    	; 0x29e <main>
  b4:	07 c1       	rjmp	.+526    	; 0x2c4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_command>:
void lcd_display_position(unsigned char row, unsigned char col)
{
	unsigned cmd;
	
	cmd = 0x80 | ((row-1)*0x40+(col-1));
	lcd_command(cmd);
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	30 e7       	ldi	r19, 0x70	; 112
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	30 40       	sbci	r19, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <lcd_command+0x6>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_command+0x10>
  c8:	00 00       	nop
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	86 70       	andi	r24, 0x06	; 6
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	85 70       	andi	r24, 0x05	; 5
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	aa 9a       	sbi	0x15, 2	; 21
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	83 70       	andi	r24, 0x03	; 3
  de:	85 bb       	out	0x15, r24	; 21
  e0:	25 e0       	ldi	r18, 0x05	; 5
  e2:	2a 95       	dec	r18
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_command+0x2a>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <lcd_init>:
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a bb       	out	0x1a, r24	; 26
  ee:	84 b3       	in	r24, 0x14	; 20
  f0:	8f 60       	ori	r24, 0x0F	; 15
  f2:	84 bb       	out	0x14, r24	; 20
  f4:	8f e5       	ldi	r24, 0x5F	; 95
  f6:	9a ee       	ldi	r25, 0xEA	; 234
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_init+0xe>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_init+0x14>
  fe:	00 00       	nop
 100:	80 e3       	ldi	r24, 0x30	; 48
 102:	8b bb       	out	0x1b, r24	; 27
 104:	85 b3       	in	r24, 0x15	; 21
 106:	15 ba       	out	0x15, r1	; 21
 108:	8f e0       	ldi	r24, 0x0F	; 15
 10a:	90 e4       	ldi	r25, 0x40	; 64
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_init+0x22>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_init+0x28>
 112:	00 00       	nop
 114:	85 b3       	in	r24, 0x15	; 21
 116:	15 ba       	out	0x15, r1	; 21
 118:	8f e8       	ldi	r24, 0x8F	; 143
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_init+0x32>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_init+0x38>
 122:	00 00       	nop
 124:	85 b3       	in	r24, 0x15	; 21
 126:	15 ba       	out	0x15, r1	; 21
 128:	88 e3       	ldi	r24, 0x38	; 56
 12a:	c6 df       	rcall	.-116    	; 0xb8 <lcd_command>
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	c4 df       	rcall	.-120    	; 0xb8 <lcd_command>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	c2 df       	rcall	.-124    	; 0xb8 <lcd_command>
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	c0 df       	rcall	.-128    	; 0xb8 <lcd_command>
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	be cf       	rjmp	.-132    	; 0xb8 <lcd_command>
 13c:	08 95       	ret

0000013e <lcd_data>:
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	30 e7       	ldi	r19, 0x70	; 112
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	21 50       	subi	r18, 0x01	; 1
 146:	30 40       	sbci	r19, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <lcd_data+0x6>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_data+0x10>
 14e:	00 00       	nop
 150:	a8 9a       	sbi	0x15, 0	; 21
 152:	95 b3       	in	r25, 0x15	; 21
 154:	95 70       	andi	r25, 0x05	; 5
 156:	95 bb       	out	0x15, r25	; 21
 158:	aa 9a       	sbi	0x15, 2	; 21
 15a:	e7 ec       	ldi	r30, 0xC7	; 199
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_data+0x20>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_data+0x26>
 164:	00 00       	nop
 166:	8b bb       	out	0x1b, r24	; 27
 168:	87 ec       	ldi	r24, 0xC7	; 199
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_data+0x2e>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_data+0x34>
 172:	00 00       	nop
 174:	85 b3       	in	r24, 0x15	; 21
 176:	83 70       	andi	r24, 0x03	; 3
 178:	85 bb       	out	0x15, r24	; 21
 17a:	08 95       	ret

0000017c <lcd_string>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
 182:	88 81       	ld	r24, Y
 184:	88 23       	and	r24, r24
 186:	29 f0       	breq	.+10     	; 0x192 <lcd_string+0x16>
 188:	21 96       	adiw	r28, 0x01	; 1
 18a:	d9 df       	rcall	.-78     	; 0x13e <lcd_data>
 18c:	89 91       	ld	r24, Y+
 18e:	81 11       	cpse	r24, r1
 190:	fc cf       	rjmp	.-8      	; 0x18a <lcd_string+0xe>
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <__vector_1>:

unsigned char pattern[9]
= { 0x5B, 0x3F, 0x06, 0x66, 0x3F, 0x66, 0x3F, 0x5B, 0x5B};

ISR(INT0_vect)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	0b b6       	in	r0, 0x3b	; 59
 1a4:	0f 92       	push	r0
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	lcd_init();
 1be:	95 df       	rcall	.-214    	; 0xea <lcd_init>
	lcd_string("EMERGENCY");
 1c0:	89 e0       	ldi	r24, 0x09	; 9
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	db df       	rcall	.-74     	; 0x17c <lcd_string>
	
	DDRE = 0Xff;//LED
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	82 b9       	out	0x02, r24	; 2
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i=0;i<10;i++)
	{
		PORTE = 0xff;
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	23 b9       	out	0x03, r18	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	3f ef       	ldi	r19, 0xFF	; 255
 1d4:	49 e6       	ldi	r20, 0x69	; 105
 1d6:	58 e1       	ldi	r21, 0x18	; 24
 1d8:	31 50       	subi	r19, 0x01	; 1
 1da:	40 40       	sbci	r20, 0x00	; 0
 1dc:	50 40       	sbci	r21, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <__vector_1+0x40>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <__vector_1+0x4a>
 1e2:	00 00       	nop
		_delay_ms(500);
		PORTE = 0x00;
 1e4:	13 b8       	out	0x03, r1	; 3
 1e6:	3f ef       	ldi	r19, 0xFF	; 255
 1e8:	49 e6       	ldi	r20, 0x69	; 105
 1ea:	58 e1       	ldi	r21, 0x18	; 24
 1ec:	31 50       	subi	r19, 0x01	; 1
 1ee:	40 40       	sbci	r20, 0x00	; 0
 1f0:	50 40       	sbci	r21, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <__vector_1+0x54>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <__vector_1+0x5e>
 1f6:	00 00       	nop
 1f8:	01 97       	sbiw	r24, 0x01	; 1
	lcd_init();
	lcd_string("EMERGENCY");
	
	DDRE = 0Xff;//LED
	
	for (int i=0;i<10;i++)
 1fa:	51 f7       	brne	.-44     	; 0x1d0 <__vector_1+0x38>
		_delay_ms(500);
		PORTE = 0x00;
		_delay_ms(500);
	}

}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0b be       	out	0x3b, r0	; 59
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_2>:

ISR(INT1_vect)
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	0b b6       	in	r0, 0x3b	; 59
 22e:	0f 92       	push	r0
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	lcd_init();
 248:	50 df       	rcall	.-352    	; 0xea <lcd_init>
	lcd_string("201404022 PSH");
 24a:	83 e1       	ldi	r24, 0x13	; 19
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	96 df       	rcall	.-212    	; 0x17c <lcd_string>

	DDRB = 0xff;
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	87 bb       	out	0x17, r24	; 23
 254:	e0 e0       	ldi	r30, 0x00	; 0
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	29 e0       	ldi	r18, 0x09	; 9
 25a:	31 e0       	ldi	r19, 0x01	; 1
	
	for(int i=0;i<9;i++){
		PORTB = pattern[i];
 25c:	81 91       	ld	r24, Z+
 25e:	88 bb       	out	0x18, r24	; 24
 260:	4f ef       	ldi	r20, 0xFF	; 255
 262:	83 ec       	ldi	r24, 0xC3	; 195
 264:	99 e0       	ldi	r25, 0x09	; 9
 266:	41 50       	subi	r20, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <__vector_2+0x44>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <__vector_2+0x4e>
 270:	00 00       	nop
	lcd_init();
	lcd_string("201404022 PSH");

	DDRB = 0xff;
	
	for(int i=0;i<9;i++){
 272:	e2 17       	cp	r30, r18
 274:	f3 07       	cpc	r31, r19
 276:	91 f7       	brne	.-28     	; 0x25c <__vector_2+0x3a>
		PORTB = pattern[i];
		_delay_ms(DELAY_TIME);
	}

}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0b be       	out	0x3b, r0	; 59
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <main>:

int main(void)

{
	DDRE = 0Xff;//LED
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	82 b9       	out	0x02, r24	; 2
	DDRA = 0Xff;  // lcd
 2a2:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0Xff;  // lcd sw
 2a4:	84 bb       	out	0x14, r24	; 20
	DDRB = 0Xff;  // seg
 2a6:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
 2a8:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xff;
 2aa:	82 bb       	out	0x12, r24	; 18
	PORTB = pattern [i];
 2ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b0:	88 bb       	out	0x18, r24	; 24
	EICRA |= (3<<ISC00)|(3<<ISC00);
 2b2:	ea e6       	ldi	r30, 0x6A	; 106
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	83 60       	ori	r24, 0x03	; 3
 2ba:	80 83       	st	Z, r24
	EIMSK = 0x03;
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	89 bf       	out	0x39, r24	; 57
	sei();
 2c0:	78 94       	sei
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <main+0x24>

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
