
FND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000166  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f6  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000817  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ec  00000000  00000000  00001385  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fb  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	56 c0       	rjmp	.+172    	; 0x162 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#define MACRO 200
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	60 97       	sbiw	r28, 0x10	; 16
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	unsigned char p [16] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1e>
	int i = 0;
	DDRF = 0x00;
  de:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRC = 0x00;
  e2:	14 ba       	out	0x14, r1	; 20
	DDRB = 0xff;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xff;
  e8:	82 b9       	out	0x02, r24	; 2
	PORTB = p[i];
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	88 bb       	out	0x18, r24	; 24
#include <util/delay.h>

int main(void)
{
	unsigned char p [16] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
	int i = 0;
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
			PORTB = p[i];
		   }
		while(PINC & 0x01)
		{
			if(++i==16)i=0;
			PORTE = 0x0d;
  f2:	3d e0       	ldi	r19, 0x0D	; 13

	while(1){
		while(PINF & 0x01)
		{
			if(--i==-1)i=15;
			PORTE = 0x0e;
  f4:	4e e0       	ldi	r20, 0x0E	; 14
  f6:	16 c0       	rjmp	.+44     	; 0x124 <main+0x6c>
	PORTB = p[i];

	while(1){
		while(PINF & 0x01)
		{
			if(--i==-1)i=15;
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	10 f4       	brcc	.+4      	; 0x100 <main+0x48>
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	90 e0       	ldi	r25, 0x00	; 0
			PORTE = 0x0e;
 100:	43 b9       	out	0x03, r20	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	5f ef       	ldi	r21, 0xFF	; 255
 104:	63 ec       	ldi	r22, 0xC3	; 195
 106:	29 e0       	ldi	r18, 0x09	; 9
 108:	51 50       	subi	r21, 0x01	; 1
 10a:	60 40       	sbci	r22, 0x00	; 0
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x50>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x5a>
 112:	00 00       	nop
			_delay_ms(MACRO);
			PORTB = p[i];
 114:	e1 e0       	ldi	r30, 0x01	; 1
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ec 0f       	add	r30, r28
 11a:	fd 1f       	adc	r31, r29
 11c:	e8 0f       	add	r30, r24
 11e:	f9 1f       	adc	r31, r25
 120:	20 81       	ld	r18, Z
 122:	28 bb       	out	0x18, r18	; 24
	DDRB = 0xff;
	DDRE = 0xff;
	PORTB = p[i];

	while(1){
		while(PINF & 0x01)
 124:	00 99       	sbic	0x00, 0	; 0
 126:	e8 cf       	rjmp	.-48     	; 0xf8 <main+0x40>
			if(--i==-1)i=15;
			PORTE = 0x0e;
			_delay_ms(MACRO);
			PORTB = p[i];
		   }
		while(PINC & 0x01)
 128:	98 9b       	sbis	0x13, 0	; 19
 12a:	fc cf       	rjmp	.-8      	; 0x124 <main+0x6c>
		{
			if(++i==16)i=0;
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	80 31       	cpi	r24, 0x10	; 16
 130:	91 05       	cpc	r25, r1
 132:	11 f4       	brne	.+4      	; 0x138 <main+0x80>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
			PORTE = 0x0d;
 138:	33 b9       	out	0x03, r19	; 3
 13a:	5f ef       	ldi	r21, 0xFF	; 255
 13c:	63 ec       	ldi	r22, 0xC3	; 195
 13e:	29 e0       	ldi	r18, 0x09	; 9
 140:	51 50       	subi	r21, 0x01	; 1
 142:	60 40       	sbci	r22, 0x00	; 0
 144:	20 40       	sbci	r18, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x88>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x92>
 14a:	00 00       	nop
			_delay_ms(MACRO);
			PORTB = p[i];
 14c:	e1 e0       	ldi	r30, 0x01	; 1
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ec 0f       	add	r30, r28
 152:	fd 1f       	adc	r31, r29
 154:	e8 0f       	add	r30, r24
 156:	f9 1f       	adc	r31, r25
 158:	20 81       	ld	r18, Z
 15a:	28 bb       	out	0x18, r18	; 24
			if(--i==-1)i=15;
			PORTE = 0x0e;
			_delay_ms(MACRO);
			PORTB = p[i];
		   }
		while(PINC & 0x01)
 15c:	98 99       	sbic	0x13, 0	; 19
 15e:	e6 cf       	rjmp	.-52     	; 0x12c <main+0x74>
 160:	e1 cf       	rjmp	.-62     	; 0x124 <main+0x6c>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
