
1023 swichmoon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  000002f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a61  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000877  00000000  00000000  00000df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000395  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b6  00000000  00000000  00001ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000207d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	aa c0       	rjmp	.+340    	; 0x15e <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	98 d0       	rcall	.+304    	; 0x1f4 <main>
  c4:	c4 c0       	rjmp	.+392    	; 0x24e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:
= { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71
};


ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	if(--i==-1)
  e0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
  e4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <i+0x1>
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	28 f0       	brcs	.+10     	; 0xf6 <__vector_1+0x2e>
  ec:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <i+0x1>
  f0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i>
  f4:	06 c0       	rjmp	.+12     	; 0x102 <__vector_1+0x3a>
	i=15;
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <i+0x1>
  fe:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i>
	PORTC = 0xfe;
 102:	8e ef       	ldi	r24, 0xFE	; 254
 104:	85 bb       	out	0x15, r24	; 21
	PORTA = pattern[i];
 106:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <i>
 10a:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <i+0x1>
 10e:	e0 50       	subi	r30, 0x00	; 0
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	80 81       	ld	r24, Z
 114:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	91 ee       	ldi	r25, 0xE1	; 225
 11a:	24 e0       	ldi	r18, 0x04	; 4
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	20 40       	sbci	r18, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <__vector_1+0x54>
 124:	00 c0       	rjmp	.+0      	; 0x126 <__vector_1+0x5e>
 126:	00 00       	nop
	_delay_ms(DELAY_TIME);
	while (~PIND & 0X01){
 128:	80 99       	sbic	0x10, 0	; 16
 12a:	0b c0       	rjmp	.+22     	; 0x142 <__vector_1+0x7a>
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	91 ee       	ldi	r25, 0xE1	; 225
 130:	24 e0       	ldi	r18, 0x04	; 4
 132:	81 50       	subi	r24, 0x01	; 1
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	20 40       	sbci	r18, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <__vector_1+0x6a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_1+0x74>
 13c:	00 00       	nop
 13e:	80 9b       	sbis	0x10, 0	; 16
 140:	f5 cf       	rjmp	.-22     	; 0x12c <__vector_1+0x64>
		_delay_ms(DELAY_TIME);
	}
	EIFR = (1<<INTF0);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	88 bf       	out	0x38, r24	; 56
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0b be       	out	0x3b, r0	; 59
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_2>:

ISR(INT1_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	0b b6       	in	r0, 0x3b	; 59
 16a:	0f 92       	push	r0
 16c:	2f 93       	push	r18
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	if(++j==16)
 176:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 17a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	80 31       	cpi	r24, 0x10	; 16
 182:	91 05       	cpc	r25, r1
 184:	29 f0       	breq	.+10     	; 0x190 <__vector_2+0x32>
 186:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 18a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 18e:	04 c0       	rjmp	.+8      	; 0x198 <__vector_2+0x3a>
	j=0;
 190:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 194:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	PORTC = 0xfd;
 198:	8d ef       	ldi	r24, 0xFD	; 253
 19a:	85 bb       	out	0x15, r24	; 21
	PORTA = pattern[j];
 19c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 1a0:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 1a4:	e0 50       	subi	r30, 0x00	; 0
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	80 81       	ld	r24, Z
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	81 ee       	ldi	r24, 0xE1	; 225
 1b0:	94 e0       	ldi	r25, 0x04	; 4
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <__vector_2+0x54>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <__vector_2+0x5e>
 1bc:	00 00       	nop
	_delay_ms(DELAY_TIME);
	while(~PIND & 0x01){
 1be:	80 99       	sbic	0x10, 0	; 16
 1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <__vector_2+0x7a>
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	81 ee       	ldi	r24, 0xE1	; 225
 1c6:	94 e0       	ldi	r25, 0x04	; 4
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <__vector_2+0x6a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <__vector_2+0x74>
 1d2:	00 00       	nop
 1d4:	80 9b       	sbis	0x10, 0	; 16
 1d6:	f5 cf       	rjmp	.-22     	; 0x1c2 <__vector_2+0x64>
		_delay_ms(DELAY_TIME);
	}
	EIFR = (1<<INTF0);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	88 bf       	out	0x38, r24	; 56
}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0b be       	out	0x3b, r0	; 59
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <main>:

int main(void)

{
	DDRA = 0Xff;  // 출력
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0Xff;
 1f8:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 1fa:	15 ba       	out	0x15, r1	; 21
	PORTA = pattern [0];
 1fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 200:	8b bb       	out	0x1b, r24	; 27
	EICRA = (3<<ISC00);
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x03;
 208:	89 bf       	out	0x39, r24	; 57
	sei();
 20a:	78 94       	sei
	
	while (1) {
		PORTC = 0xfe;
 20c:	2e ef       	ldi	r18, 0xFE	; 254
		PORTA = pattern[i];
		_delay_us(100);
		PORTC = 0xfd;
 20e:	9d ef       	ldi	r25, 0xFD	; 253
	EICRA = (3<<ISC00);
	EIMSK = 0x03;
	sei();
	
	while (1) {
		PORTC = 0xfe;
 210:	25 bb       	out	0x15, r18	; 21
		PORTA = pattern[i];
 212:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <i>
 216:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <i+0x1>
 21a:	e0 50       	subi	r30, 0x00	; 0
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 81       	ld	r24, Z
 220:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	ef e8       	ldi	r30, 0x8F	; 143
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x32>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x38>
 22c:	00 00       	nop
		_delay_us(100);
		PORTC = 0xfd;
 22e:	95 bb       	out	0x15, r25	; 21
		PORTA = pattern[j];
 230:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 234:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 238:	e0 50       	subi	r30, 0x00	; 0
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	80 81       	ld	r24, Z
 23e:	8b bb       	out	0x1b, r24	; 27
 240:	ef e8       	ldi	r30, 0x8F	; 143
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x50>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x56>
 24a:	00 00       	nop
 24c:	e1 cf       	rjmp	.-62     	; 0x210 <main+0x1c>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
